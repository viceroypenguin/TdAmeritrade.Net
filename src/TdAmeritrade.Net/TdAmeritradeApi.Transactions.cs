namespace TdAmeritrade;

using Models.Transactions;

public partial class TdAmeritradeApi
{
	/// <summary>
	/// Search transactions for a specific account
	/// </summary>
	/// <param name="accountId">The account to search transactions</param>
	/// <param name="searchOptions">Search filters for the transactions</param>
	/// <returns>
	/// If successful, the return includes a list of associated accounts and information about each. 
	/// </returns>
	/// <exception cref="ArgumentNullException" />
	/// <exception cref="ApiException" />
	/// <remarks>
	/// See also: <seealso href="https://developer.tdameritrade.com/transaction-history/apis/get/accounts/%7BaccountId%7D/transactions-0"/>
	/// </remarks>
	public Task<IReadOnlyList<Transaction>> GetTransactions(string accountId, TransactionSearchOptions? searchOptions = default) =>
		GetTransactions(refreshToken: default, accountId, searchOptions);

	/// <summary>
	/// Search transactions for a specific account
	/// </summary>
	/// <param name="refreshToken">A refresh token generated by TD Ameritrade APIs for authentication.</param>
	/// <param name="accountId">The account to search transactions</param>
	/// <param name="searchOptions">Search filters for the transactions</param>
	/// <returns>
	/// If successful, the return includes a list of associated accounts and information about each. 
	/// </returns>
	/// <exception cref="ArgumentNullException" />
	/// <exception cref="ApiException" />
	/// <remarks>
	/// See also: <seealso href="https://developer.tdameritrade.com/transaction-history/apis/get/accounts/%7BaccountId%7D/transactions-0"/>
	/// </remarks>
	public async Task<IReadOnlyList<Transaction>> GetTransactions(string? refreshToken, string accountId, TransactionSearchOptions? searchOptions = default)
	{
		refreshToken ??= _refreshToken;
		if (refreshToken == null)
			throw new ArgumentNullException(nameof(refreshToken), "GetTransactions API requires a refreshToken.");

		var accessToken = await GetAccessToken(refreshToken).ConfigureAwait(false);
		return await _api.GetTransactions(accessToken, accountId, searchOptions).ConfigureAwait(false);
	}
}
