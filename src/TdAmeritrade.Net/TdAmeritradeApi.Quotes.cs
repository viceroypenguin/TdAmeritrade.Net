namespace TdAmeritrade;

using Models.Quotes;

public partial class TdAmeritradeApi
{
	/// <summary>
	/// This API allows the developer to get the quote information for a single symbol
	/// </summary>
	/// <param name="symbol">The requested symbol</param>
	/// <returns>
	/// If successful, the return includes quote information for the requested symbol.
	/// </returns>
	/// <exception cref="ApiException" />
	/// <remarks>
	/// See also: <seealso href="https://developer.tdameritrade.com/quotes/apis/get/marketdata/%7Bsymbol%7D/quotes"/>
	/// </remarks>
	public Task<IReadOnlyDictionary<string, Quote>> GetQuote(string symbol) =>
		GetQuote(refreshToken: default, symbol);

	/// <summary>
	/// This API allows the developer to get the quote information for a single symbol
	/// </summary>
	/// <param name="refreshToken">A refresh token generated by TD Ameritrade APIs for authentication.</param>
	/// <param name="symbol">The requested symbol</param>
	/// <returns>
	/// If successful, the return includes quote information for the requested symbol.
	/// </returns>
	/// <exception cref="ApiException" />
	/// <remarks>
	/// See also: <seealso href="https://developer.tdameritrade.com/quotes/apis/get/marketdata/%7Bsymbol%7D/quotes"/>
	/// </remarks>
	public async Task<IReadOnlyDictionary<string, Quote>> GetQuote(string? refreshToken, string symbol)
	{
		refreshToken ??= _refreshToken;
		if (refreshToken == null)
			return await _api.GetQuote(authorization: default, apikey: _clientId, symbol).ConfigureAwait(false);

		var accessToken = await GetAccessToken(refreshToken).ConfigureAwait(false);
		return await _api.GetQuote(accessToken, apikey: default, symbol).ConfigureAwait(false);
	}

	/// <summary>
	/// This API allows the developer to get the quote information for multiple symbols
	/// </summary>
	/// <param name="symbol">The requested symbols</param>
	/// <returns>
	/// If successful, the return includes quote information for the requested symbol.
	/// </returns>
	/// <exception cref="ApiException" />
	/// <remarks>
	/// See also: <seealso href="https://developer.tdameritrade.com/quotes/apis/get/marketdata/quotes"/>
	/// </remarks>
	public Task<IReadOnlyDictionary<string, Quote>> GetQuotes(IReadOnlyList<string> symbol) =>
		GetQuotes(refreshToken: default, symbol);

	/// <summary>
	/// This API allows the developer to get the quote information for a single symbol
	/// </summary>
	/// <param name="refreshToken">A refresh token generated by TD Ameritrade APIs for authentication.</param>
	/// <param name="symbol">The requested symbols</param>
	/// <returns>
	/// If successful, the return includes quote information for the requested symbol.
	/// </returns>
	/// <exception cref="ApiException" />
	/// <remarks>
	/// See also: <seealso href="https://developer.tdameritrade.com/quotes/apis/get/marketdata/quotes"/>
	/// </remarks>
	public async Task<IReadOnlyDictionary<string, Quote>> GetQuotes(string? refreshToken, IReadOnlyList<string> symbol)
	{
		refreshToken ??= _refreshToken;
		if (refreshToken == null)
			return await _api.GetQuotes(authorization: default, apikey: _clientId, symbol).ConfigureAwait(false);

		var accessToken = await GetAccessToken(refreshToken).ConfigureAwait(false);
		return await _api.GetQuotes(accessToken, apikey: default, symbol).ConfigureAwait(false);
	}
}
