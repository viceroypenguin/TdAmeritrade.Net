using System.Net;
using Microsoft.Extensions.Caching.Memory;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;

namespace TdAmeritrade;

using System.Text.Json;
using Internal;

public static class TdAmeritradeServiceCollectionExtensions
{
	/// <summary>
	/// Registers a <c>Func&lt;<see langword="string"/>, <see cref="TdAmeritradeApi"/>&gt;</c> generator that receives a <c>clientId</c>,
	/// a <c>Func&lt;<see langword="string"/>, <see langword="string"/>, <see cref="TdAmeritradeApi"/>&gt;</c> generator that receives a <c>clientId</c> and a <c>refreshToken</c>,
	/// and dependencies to the DI system.
	/// </summary>
	/// <param name="services">The <see cref="IServiceCollection"/> to add the services to</param>
	/// <returns>The <see cref="IServiceCollection"/> so that additional calls can be chained</returns>
	public static IServiceCollection AddTdAmeritradeApi(
		this IServiceCollection services)
	{
		if (services.Any(s => s.ServiceType == typeof(TdAmeritradeApi)))
			return services;

		services.AddITdAmeritradeApiRefitClient();
		services.AddTransient<Func<string, TdAmeritradeApi>>(sp =>
			clientId =>
				new TdAmeritradeApi(
					clientId,
					refreshToken: default,
					sp.GetRequiredService<ITdAmeritradeApi>(),
					sp.GetRequiredService<IMemoryCache>(),
					sp.GetRequiredService<ILogger<TdAmeritradeApi>>()));
		services.AddTransient<Func<string, string, TdAmeritradeApi>>(sp =>
			(clientId, refreshToken) =>
				new TdAmeritradeApi(
					clientId,
					refreshToken,
					sp.GetRequiredService<ITdAmeritradeApi>(),
					sp.GetRequiredService<IMemoryCache>(),
					sp.GetRequiredService<ILogger<TdAmeritradeApi>>()));
		return services;
	}

	/// <summary>
	/// Registers the <see cref="TdAmeritradeApi"/> class based on a constant <c>clientId</c>, 
	/// a <c>Func&lt;<see langword="string"/>, <see cref="TdAmeritradeApi"/>&gt;</c> generator that receives a <c>refreshToken</c>,
	/// and dependencies to the DI system.
	/// </summary>
	/// <param name="services">The <see cref="IServiceCollection"/> to add the services to</param>
	/// <param name="clientId">The client id provided by TD Ameritrade for this application. NB: This value will be used for all instances of the class.</param>
	/// <returns>The <see cref="IServiceCollection"/> so that additional calls can be chained</returns>
	public static IServiceCollection AddTdAmeritradeApi(
		this IServiceCollection services,
		string clientId)
	{
		if (services.Any(s => s.ServiceType == typeof(TdAmeritradeApi)))
			return services;

		services.AddITdAmeritradeApiRefitClient();
		services.AddTransient(sp =>
			new TdAmeritradeApi(
				clientId,
				refreshToken: default,
				sp.GetRequiredService<ITdAmeritradeApi>(),
				sp.GetRequiredService<IMemoryCache>(),
				sp.GetRequiredService<ILogger<TdAmeritradeApi>>()));
		services.AddTransient<Func<string, TdAmeritradeApi>>(sp =>
			refreshToken =>
				new TdAmeritradeApi(
					clientId,
					refreshToken,
					sp.GetRequiredService<ITdAmeritradeApi>(),
					sp.GetRequiredService<IMemoryCache>(),
					sp.GetRequiredService<ILogger<TdAmeritradeApi>>()));
		return services;
	}

	/// <summary>
	/// Registers the <see cref="TdAmeritradeApi"/> class based on a constant <c>clientId</c> and <c>refreshToken</c> and dependencies to the DI system.
	/// </summary>
	/// <param name="services">The <see cref="IServiceCollection"/> to add the services to</param>
	/// <param name="clientId">The client id provided by TD Ameritrade for this application. NB: This value will be used for all instances of the class.</param>
	/// <param name="refreshToken">A refresh token generated by TD Ameritrade APIs for authentication. NB: This value will be used for all instances of the class.</param>
	/// <returns>The <see cref="IServiceCollection"/> so that additional calls can be chained</returns>
	public static IServiceCollection AddTdAmeritradeApi(
		this IServiceCollection services,
		string clientId,
		string refreshToken)
	{
		if (services.Any(s => s.ServiceType == typeof(TdAmeritradeApi)))
			return services;

		services.AddITdAmeritradeApiRefitClient();
		services.AddTransient(sp =>
			new TdAmeritradeApi(
				clientId,
				refreshToken: refreshToken,
				sp.GetRequiredService<ITdAmeritradeApi>(),
				sp.GetRequiredService<IMemoryCache>(),
				sp.GetRequiredService<ILogger<TdAmeritradeApi>>()));
		return services;
	}

	/// <summary>
	/// Registers an <c>ITdAmeritradeApi</c> Refit client.
	/// </summary>
	/// <param name="services">The <see cref="IServiceCollection"/> to add the services to</param>
	/// <returns>The <see cref="IServiceCollection"/> so that additional calls can be chained</returns>
	public static IServiceCollection AddITdAmeritradeApiRefitClient(
		this IServiceCollection services)
	{
		services
			.AddRefitClient<ITdAmeritradeApi>(
				new RefitSettings
				{
					ContentSerializer = new SystemTextJsonContentSerializer(
						new JsonSerializerOptions
						{
							NumberHandling = JsonNumberHandling.AllowNamedFloatingPointLiterals,
							PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
						}),
				})
			.ConfigureHttpClient(c => c.BaseAddress = new Uri("https://api.tdameritrade.com"))
			.ConfigurePrimaryHttpMessageHandler(() =>
				new HttpClientHandler
				{
#if NETCOREAPP3_1_OR_GREATER
					AutomaticDecompression = DecompressionMethods.All,
#else
					AutomaticDecompression =
						DecompressionMethods.GZip
						| DecompressionMethods.Deflate,
#endif
				});
		return services;
	}
}
