namespace TdAmeritrade;

using Models.Instruments;

public partial class TdAmeritradeApi
{
	/// <summary>
	/// This API allows the developer to search for instrument data, including fundamental data
	/// </summary>
	/// <param name="projection">
	/// The type of request (must be one of the following):
	/// <list type="table">
	/// <item><term>symbol-search</term><description>Retrieve instrument data of a specific symbol or cusip</description></item>
	/// <item><term>symbol-regex</term><description>Retrieve instrument data for all symbols matching regex.Example: symbol= XYZ.* will return all symbols beginning with XYZ</description></item>
	/// <item><term>desc-search</term><description>Retrieve instrument data for instruments whose description contains the word supplied.Example: symbol= FakeCompany will return all instruments with FakeCompany in the description.</description></item>
	/// <item><term>desc-regex</term><description>Search description with full regex support. Example: symbol= XYZ.[A - C] returns all instruments whose descriptions contain a word beginning with XYZ followed by a character A through C.</description></item>
	/// <item><term>fundamental</term><description>Returns fundamental data for a single instrument specified by exact symbol.</description></item>
	/// </list>
	/// </param>
	/// <param name="symbol">
	/// Value to pass to the search. See <paramref name="projection"/> for more information.
	/// </param>
	/// <returns>
	/// If successful, the return includes the search results.
	/// </returns>
	/// <exception cref="ApiException" />
	/// <remarks>
	/// See also: <seealso href="https://developer.tdameritrade.com/instruments/apis/get/instruments"/>
	/// </remarks>
	public Task<IReadOnlyDictionary<string, Instrument>> GetInstruments(string projection, string symbol) =>
		GetInstruments(refreshToken: default, projection, symbol);

	/// <summary>
	/// This API allows the developer to search for instrument data, including fundamental data
	/// </summary>
	/// <param name="refreshToken">A refresh token generated by TD Ameritrade APIs for authentication.</param>
	/// <param name="projection">
	/// The type of request (must be one of the following):
	/// <list type="table">
	/// <item><term>symbol-search</term><description>Retrieve instrument data of a specific symbol or cusip</description></item>
	/// <item><term>symbol-regex</term><description>Retrieve instrument data for all symbols matching regex.Example: symbol= XYZ.* will return all symbols beginning with XYZ</description></item>
	/// <item><term>desc-search</term><description>Retrieve instrument data for instruments whose description contains the word supplied.Example: symbol= FakeCompany will return all instruments with FakeCompany in the description.</description></item>
	/// <item><term>desc-regex</term><description>Search description with full regex support. Example: symbol= XYZ.[A - C] returns all instruments whose descriptions contain a word beginning with XYZ followed by a character A through C.</description></item>
	/// <item><term>fundamental</term><description>Returns fundamental data for a single instrument specified by exact symbol.</description></item>
	/// </list>
	/// </param>
	/// <param name="symbol">
	/// Value to pass to the search. See <paramref name="projection"/> for more information.
	/// </param>
	/// <returns>
	/// If successful, the return includes the search results.
	/// </returns>
	/// <exception cref="ApiException" />
	/// <remarks>
	/// See also: <seealso href="https://developer.tdameritrade.com/instruments/apis/get/instruments"/>
	/// </remarks>
	public async Task<IReadOnlyDictionary<string, Instrument>> GetInstruments(string? refreshToken, string projection, string symbol)
	{
		refreshToken ??= _refreshToken;
		if (refreshToken == null)
			return await _api.GetInstruments(authorization: default, _clientId, projection, symbol).ConfigureAwait(false);

		var accessToken = await GetAccessToken(refreshToken).ConfigureAwait(false);
		return await _api.GetInstruments(accessToken, apikey: default, projection, symbol).ConfigureAwait(false);
	}

	/// <summary>
	/// This API allows the developer to get information about a single CUSIP
	/// </summary>
	/// <param name="cusip">
	/// The cusip for which to get information.
	/// </param>
	/// <returns>
	/// If successful, the return includes the search results.
	/// </returns>
	/// <exception cref="ApiException" />
	/// <remarks>
	/// See also: <seealso href="https://developer.tdameritrade.com/instruments/apis/get/instruments/%7Bcusip%7D"/>
	/// </remarks>
	public Task<IReadOnlyList<Instrument>> GetInstrument(string cusip) =>
		GetInstrument(refreshToken: default, cusip);

	/// <summary>
	/// This API allows the developer to get information about a single CUSIP
	/// </summary>
	/// <param name="refreshToken">A refresh token generated by TD Ameritrade APIs for authentication.</param>
	/// <param name="cusip">
	/// The cusip for which to get information.
	/// </param>
	/// <returns>
	/// If successful, the return includes the search results.
	/// </returns>
	/// <exception cref="ApiException" />
	/// <remarks>
	/// See also: <seealso href="https://developer.tdameritrade.com/instruments/apis/get/instruments/%7Bcusip%7D"/>
	/// </remarks>
	public async Task<IReadOnlyList<Instrument>> GetInstrument(string? refreshToken, string cusip)
	{
		refreshToken ??= _refreshToken;
		if (refreshToken == null)
			return await _api.GetInstrument(authorization: default, _clientId, cusip).ConfigureAwait(false);

		var accessToken = await GetAccessToken(refreshToken).ConfigureAwait(false);
		return await _api.GetInstrument(accessToken, apikey: default, cusip).ConfigureAwait(false);
	}
}
