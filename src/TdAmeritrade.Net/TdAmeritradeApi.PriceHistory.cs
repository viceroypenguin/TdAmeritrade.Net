namespace TdAmeritrade;

using Models.PriceHistory;

public partial class TdAmeritradeApi
{
	/// <summary>
	/// This API allows the developer to get the price history for a single symbol.
	/// </summary>
	/// <param name="symbol">The symbol for which to get history</param>
	/// <param name="request">Some optional parameters for the data request</param>
	/// <returns>
	/// If successful, the return includes the price history for the symbol. 
	/// </returns>
	/// <exception cref="ApiException" />
	/// <remarks>
	/// See also: <seealso href="https://developer.tdameritrade.com/price-history/apis/get/marketdata/%7Bsymbol%7D/pricehistory"/>
	/// </remarks>
	public Task<PriceHistoryResponse> GetPriceHistory(string symbol, PriceHistoryRequest? request = default) =>
		GetPriceHistory(refreshToken: default, symbol, request);

	/// <summary>
	/// This API allows the developer to get the price history for a single symbol.
	/// </summary>
	/// <param name="refreshToken">A refresh token generated by TD Ameritrade APIs for authentication.</param>
	/// <param name="symbol">The symbol for which to get history</param>
	/// <param name="request">Some optional parameters for the data request</param>
	/// <returns>
	/// If successful, the return includes the price history for the symbol. 
	/// </returns>
	/// <exception cref="ApiException" />
	/// <remarks>
	/// See also: <seealso href="https://developer.tdameritrade.com/price-history/apis/get/marketdata/%7Bsymbol%7D/pricehistory"/>
	/// </remarks>
	public async Task<PriceHistoryResponse> GetPriceHistory(string? refreshToken, string symbol, PriceHistoryRequest? request = default)
	{
		refreshToken ??= _refreshToken;
		if (refreshToken == null)
			return await _api.GetPriceHistory(authorization: default, _clientId, symbol, request).ConfigureAwait(false);

		var accessToken = await GetAccessToken(refreshToken).ConfigureAwait(false);
		return await _api.GetPriceHistory(accessToken, apikey: default, symbol, request).ConfigureAwait(false);
	}
}
