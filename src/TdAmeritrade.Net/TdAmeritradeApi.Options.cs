namespace TdAmeritrade;

using Models.Options;

public partial class TdAmeritradeApi
{
	/// <summary>
	/// This API allows the developer to get the option chain for a given symbol
	/// </summary>
	/// <param name="symbol">
	/// The symbol for which to get option data
	/// </param>
	/// <param name="request">
	/// The optional parameters for the option chain API
	/// </param>
	/// <returns>
	/// If successful, the return includes information about the option chain.
	/// </returns>
	/// <exception cref="ApiException" />
	/// <remarks>
	/// See also: <seealso href="https://developer.tdameritrade.com/option-chains/apis/get/marketdata/chains"/>
	/// </remarks>
	public Task<OptionChain?> GetOptionChain(string symbol, OptionRequest? request = default) =>
		GetOptionChain(refreshToken: default, symbol, request);

	/// <summary>
	/// This API allows the developer to get the option chain for a given symbol
	/// </summary>
	/// <param name="refreshToken">A refresh token generated by TD Ameritrade APIs for authentication.</param>
	/// <param name="symbol">
	/// The symbol for which to get option data
	/// </param>
	/// <param name="request">
	/// The optional parameters for the option chain API
	/// </param>
	/// <returns>
	/// If successful, the return includes information about the option chain.
	/// </returns>
	/// <exception cref="ApiException" />
	/// <remarks>
	/// See also: <seealso href="https://developer.tdameritrade.com/option-chains/apis/get/marketdata/chains"/>
	/// </remarks>
	public async Task<OptionChain?> GetOptionChain(string? refreshToken, string symbol, OptionRequest? request = default)
	{
		refreshToken ??= _refreshToken;
		if (refreshToken == null)
			return await _api.GetOptionChain(authorization: default, apikey: _clientId, symbol, request).ConfigureAwait(false);

		var accessToken = await GetAccessToken(refreshToken).ConfigureAwait(false);
		return await _api.GetOptionChain(accessToken, apikey: default, symbol, request).ConfigureAwait(false);
	}
}
